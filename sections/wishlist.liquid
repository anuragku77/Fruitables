<style>
    .wishlist_section_container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 0px 15px;
    }
    .skeleton_animation {
      background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
      background-size: 200% 100%;
      animation: loadingAnimation 1.5s infinite;
      height: 250px;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    @keyframes loadingAnimation {
      0% {
        background-position: 200% 0;
      }
      100% {
        background-position: -200% 0;
      }
    }
  
    /* product quick view  */
    .product_name {
      width: 200px;
      height: 200px;
      margin-top: 100px;
      margin-bottom: 500px;
    }
    .wishlist_product_container {
      display: grid !important;
      grid-template-columns: repeat(2, 1fr) !important;
      row-gap: 4px;
      margin-bottom: 150px;
      margin-top: 50px;
      column-gap: 4px;
    }
    .skeleton_container {
      display: grid !important;
      grid-template-columns: repeat(2, 1fr) !important;
      row-gap: 4px;
      margin-bottom: 150px;
      margin-top: 50px;
      column-gap: 4px;
    }
    .single_wishlist_product {
      position: relative;
      text-decoration: none;
      color: rgba(0, 0, 0, 90%);
      z-index: 1;
      overflow: hidden;
    }
    .wishlist_product_name {
      position: relative;
      font-size: 13px;
    }
    .wishlist_product_price {
      font-size: 16px;
    }
  
    .single_wishlist_product:hover .wishlist_product_name {
      text-decoration: underline;
    }
    .wishlist_product_img {
      transition: all 0.3s linear;
      transform: scale(1);
      overflow: hidden;
      width: 100%;
      height: 200px;
    }
    .single_wishlist_product:hover .wishlist_product_img {
      transform: scale(1.02);
    }
  
    .remove_wishlist_icon {
      height: 40px;
      width: 40px;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 50px;
      position: absolute;
      top: 0px;
      right: 0px;
      cursor: pointer;
    }
  
    svg {
      display: flex;
    }
    .empty_wishlist_message_wrapper {
      display: none;
      margin-bottom: 170px;
      margin-top: 7rem;
      align-items: center;
      justify-content: center;
    }
    .empty_wishlist_message {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
    }
    .view_details_button {
      padding: 5px 10px;
    }
    .wishlist_product_information_wrapper {
      display: flex;
      flex-direction: column;
      padding: 13px 0px;
    }
    .wishlist_product_info_wrapper {
      text-decoration: none;
      color: unset;
    }
    .wishlist_product_compare_price {
      font-size: 13px;
    }
    .title_wrapper_with_link {
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    .wishlist_empty_text_ {
      margin: 0px 0px 3rem 0px;
    }
    .skeleton {
      visibility: hidden;
    }
  
    @media screen and (min-width: 500px) {
      .wishlist_product_container {
        grid-template-columns: repeat(2, 1fr) !important;
      }
      .skeleton_container {
        grid-template-columns: repeat(2, 1fr) !important;
      }
      @media screen and (min-width: 749px) {
        .wishlist_section_container {
          padding: 0px 50px;
        }
        .wishlist_product_container {
          row-gap: 8px;
          column-gap: 8px;
        }
        .skeleton_container {
          row-gap: 8px;
          column-gap: 8px;
        }
      }
    }
    @media screen and (min-width: 800px) {
      .wishlist_product_container {
        grid-template-columns: repeat(3, 1fr) !important;
      }
      .skeleton_container {
        grid-template-columns: repeat(3, 1fr) !important;
      }
    }
    @media screen and (min-width: 1124px) {
      .wishlist_product_container {
        grid-template-columns: repeat(4, 1fr) !important;
      }
      .skeleton_container {
        grid-template-columns: repeat(4, 1fr) !important;
      }
    }
  </style>
  
  <div class="page-width wishlist_page_heading">
    <div class="title_wrapper_with_link">
      <h1 class="title title--primary">Your Wishlist</h1>
      <a href="{{ routes.all_products_collection_url }}" class="underlined-link">
        {{- 'general.continue_shopping' | t -}}
      </a>
    </div>
  </div>
  
  <div class="skeleton_container" style="display:none !important"></div>
  
  <div
    class="wishlist_section_container wishlist_product_container"
    shop-currency="{{ shop.money_format }}"
    currency-data="{{ shop.currency }}"
  ></div>
  
  <div class="text-center mt-5 txt empty_wishlist_message_wrapper">
    <div class="cart__warnings empty_wishlist_message">
      <h1 class="cart__empty-text-wishlist">Your Wishlist is empty</h1>
      <a href="{{ routes.all_products_collection_url }}" class="button">Continue shopping</a>
  
      {%- if shop.customer_accounts_enabled and customer == null -%}
        <h2 class="cart__login-title">{{ 'sections.cart.login.title' | t }}</h2>
        <p class="cart__login-paragraph">
          {{ 'sections.cart.login.paragraph_html' | t: link: routes.account_login_url }}
        </p>
      {%- endif -%}
    </div>
  </div>
  
  <script id="quick-add-template" type="text/template">
    {% assign product_handle = 'product_handle' %}
    {% assign product = collections.all.products | where: 'handle', product_handle | first %}
    {% if product %}
      {% render 'quick-add', product: product %}
    {% endif %}
  </script>
  
  <script>
    document.addEventListener('DOMContentLoaded', function () {
      // money format
      let formatMoney = function (cents, format) {
        if (typeof cents == 'string') {
          cents = cents.replace('.', '');
        }
        var value = '';
        var placeholderRegex = /\{\{\s*(\w+)\s*\}\}/;
        var formatString = format || this.money_format;
    
        function defaultOption(opt, def) {
          return typeof opt == 'undefined' ? def : opt;
        }
    
        function formatWithDelimiters(number, precision, thousands, decimal) {
          precision = defaultOption(precision, 2);
          thousands = defaultOption(thousands, ',');
          decimal = defaultOption(decimal, '.');
    
          if (isNaN(number) || number == null) {
            return 0;
          }
    
          number = (number / 100.0).toFixed(precision);
    
          var parts = number.split('.'),
            dollars = parts[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1' + thousands),
            cents = parts[1] ? decimal + parts[1] : '';
    
          return dollars + cents;
        }
    
        switch (formatString.match(placeholderRegex)[1]) {
          case 'amount':
            value = formatWithDelimiters(cents, 2);
            break;
          case 'amount_no_decimals':
            value = formatWithDelimiters(cents, 0);
            break;
          case 'amount_with_comma_separator':
            value = formatWithDelimiters(cents, 2, '.', ',');
            break;
          case 'amount_no_decimals_with_comma_separator':
            value = formatWithDelimiters(cents, 0, '.', ',');
            break;
        }
    
        return formatString.replace(placeholderRegex, value);
      };
    
      // Function to remove an item from local storage by its value
      function removeFromLocalStorage(valueToRemove) {
        const getLocalItem = localStorage.getItem('wishListAdd');
        const GetArrayLocalItem = JSON.parse(getLocalItem);
    
        // Item to remove
        var itemToRemove = valueToRemove;
    
        // Find the index of the item in the array
        var indexToRemove = GetArrayLocalItem.indexOf(itemToRemove);
    
        // Check if the item is in the array before removing
        if (indexToRemove !== -1) {
          // Use splice to remove the item
          GetArrayLocalItem.splice(indexToRemove, 1);
    
          // Update the local storage with the new array
          localStorage.setItem('wishListAdd', JSON.stringify(GetArrayLocalItem));
        }
      }
    
      async function fetchWishlistProducts() {
        try {
          const wishlistProducts = JSON.parse(localStorage.getItem('wishListAdd')) || [];
    
          if (wishlistProducts.length > 0) {
            let newHtml = '';
    
            for (const productHandle of wishlistProducts) {
              const response = await fetch(`/products/${productHandle}.json`);
              const data = await response.json();
              const product = data.product;
              const price = formatMoney(product.price, document.querySelector('.wishlist_product_container').getAttribute('shop-currency'));
              const comparePrice = formatMoney(product.compare_at_price, document.querySelector('.wishlist_product_container').getAttribute('shop-currency'));
    
              // Construct HTML for each product
              let newHtmlString = `
                <a href="/products/${product.handle}" class="single_wishlist_product">
                  <div class="remove_wishlist_icon" data-wishlist-remove>
                    <svg fill="#000000" width="800px" height="800px" viewBox="0 0 24 24" id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg">
                      <path d="M19,6.41,17.59,5,12,10.59,6.41,5,5,6.41,10.59,12,5,17.59,6.41,19,12,13.41,17.59,19,19,17.59,13.41,12Z"/>
                    </svg>
                  </div>
                  <img src="${product.featured_image}" alt="" class="wishlist_product_img"/>
                  <div class="wishlist_product_information_wrapper">
                    <span class="wishlist_product_name">${product.title}</span>
                    <div class="wishlist_product_price">
                      ${price}
                      ${product.compare_at_price > product.price ? `<span class="wishlist_product_compare_price">${comparePrice}</span>` : ''}
                    </div>
                  </div>
                  <div id="quick-add-${product.handle}" class="quick-add-container" data-product-handle="${product.handle}"></div>
                </a>
              `;
              newHtml += newHtmlString;
            }
    
            const wishlistContainer = document.querySelector('.wishlist_product_container');
            const emptyWishlistMessageWrapper = document.querySelector('.empty_wishlist_message_wrapper');
    
            wishlistContainer.innerHTML = newHtml;
    
            document.querySelectorAll('[data-wishlist-remove]').forEach((el) => {
              el.addEventListener('click', (e) => {
                e.preventDefault();
                const productHandle = e.target.closest('.single_wishlist_product').getAttribute('href').split('/products/')[1];
                removeFromLocalStorage(productHandle);
                e.target.closest('.single_wishlist_product').remove();
                if (wishlistContainer.children.length === 0) {
                  wishlistContainer.style.display = 'none';
                  emptyWishlistMessageWrapper.style.display = 'flex';
                }
              });
            });
    
            document.querySelectorAll('.quick-add-container').forEach((container) => {
              const productHandle = container.getAttribute('data-product-handle');
              const template = document.getElementById('quick-add-template').innerHTML.replace(/product_handle/g, productHandle);
              container.innerHTML = Liquid.parse(template);
            });
          } else {
            document.querySelector('.empty_wishlist_message_wrapper').style.display = 'flex';
            document.querySelector('.wishlist_product_container').style.display = 'none';
          }
        } catch (error) {
          console.error('Error fetching products:', error);
          document.querySelector('.empty_wishlist_message_wrapper').style.display = 'flex';
          document.querySelector('.wishlist_product_container').style.display = 'none';
        }
      }
    
      fetchWishlistProducts();
    });
  </script>
  